{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"AWS Lambda User Registration","text":"<p>Este projeto \u00e9 um exemplo de um sistema de gerenciamento da fun\u00e7\u00e3o lambda que utiliza a AWS Lambda como servi\u00e7o principal e SQS, Amazon Rds, DynamoDb e CloudWatch como servi\u00e7os auxiliares.Assim, de forma pr\u00e1tica pode-se fazer um sistema de gerenciamento de bancos de dados ou tabelas onde o SQS que \u00e9 um sistema de filas(Queue) iria mandar uma mensagem em forma de json para cadastrar algum usu\u00e1rio para a fun\u00e7\u00e3o lambda por meio de um event source mapping e ,posteriormente, usa os dados dos eventos (cadastro do usu\u00e1rio) para atualizar tabelas do DynamoDB . Al\u00e9m disso, ele armazena uma c\u00f3pia do evento em um banco de dados MySQL (Amazon Rds).</p>"},{"location":"#topologia-de-rede","title":"Topologia de Rede","text":""},{"location":"#tecnologias","title":"Tecnologias","text":""},{"location":"#servicos-utilizados","title":"Servi\u00e7os Utilizados","text":"<p>A aplica\u00e7\u00e3o de exemplo usa os seguintes servi\u00e7os da AWS:</p> <ul> <li> <p>SQS: O Amazon SQS envia mensagens(cadastro de usu\u00e1rios) para a fun\u00e7\u00e3o lambda que ir\u00e1 process\u00e1-las e envia-las para o banco de dados e a tabela do dynamoDB.</p> </li> <li> <p>AWS Lambda: l\u00ea a mensagem do SQS e envia eventos para o c\u00f3digo do handler da fun\u00e7\u00e3o.</p> </li> <li> <p>DynamoDB: armazena listas geradas pela aplica\u00e7\u00e3o.</p> </li> <li> <p>Amazon RDS: armazena uma c\u00f3pia dos registros processados em um banco de dados relacional.</p> </li> <li> <p>CloudWatch: Por meio dos streams de Log \u00e9 poss\u00edvel saber se os cadastros foram criados.</p> </li> <li> <p>Amazon VPC: fornece uma rede local privada para comunica\u00e7\u00e3o entre a fun\u00e7\u00e3o lambda e o banco de dados que necessitam estar na mesma subnet.</p> </li> </ul>"},{"location":"#requisitos","title":"Requisitos","text":"<ul> <li>AWS account</li> <li>AWS IAM user (usu\u00e1rio criado)</li> <li>Python</li> <li>Terraform</li> <li>Acesso a console da AWS</li> <li>Powershell</li> </ul>"},{"location":"#primeiros-passos","title":"Primeiros Passos","text":""},{"location":"#instalacao-terraform","title":"Instala\u00e7\u00e3o Terraform","text":"<p>Para a intala\u00e7\u00e3o do terraform siga o tutorial abaixo:   -   Instalando o Terraform no Windows, Linux e MacOS</p> <p>Para conferir se o terraform est\u00e1 devidamente instalado v\u00e1 no seu powershell e digite o seguinte comando:</p> <pre><code>terraform --version \n</code></pre> <p>Com a imagem a seguir:</p> <p></p>"},{"location":"#configuracao-aws","title":"Configura\u00e7\u00e3o AWS","text":""},{"location":"#criacao-de-usuario-e-acesso-as-credenciais","title":"Cria\u00e7\u00e3o de usu\u00e1rio e acesso as credenciais","text":"<p>Para criar credenciais na AWS para usar com o Terraform posteriormente, siga as etapas abaixo:</p> <ul> <li> <p>Fa\u00e7a login na AWS Management Console em https://console.aws.amazon.com/</p> </li> <li> <p>Navegue at\u00e9 a p\u00e1gina de servi\u00e7os e selecione \"IAM\" no menu \"Security, Identity &amp; Compliance\".</p> </li> <li> <p>Na p\u00e1gina do IAM, selecione \"Usu\u00e1rios\" no painel de navega\u00e7\u00e3o esquerdo e clique no bot\u00e3o \"Adicionar usu\u00e1rio\".</p> </li> <li> <p>Na p\u00e1gina \"Adicionar usu\u00e1rio\", digite um nome de usu\u00e1rio e selecione \"Acesso program\u00e1tico\" como tipo de acesso. Em seguida, clique no bot\u00e3o \"Avan\u00e7ar: Permiss\u00f5es\".</p> </li> <li> <p>Na p\u00e1gina \"Adicionar permiss\u00f5es\", selecione \"Anexar pol\u00edticas existentes diretamente\" e selecione a pol\u00edtica \"AdministratorAccess\" (ou outra pol\u00edtica que conceda as permiss\u00f5es necess\u00e1rias para gerenciar sua infraestrutura da AWS usando o Terraform). Em seguida,clique no bot\u00e3o \"Avan\u00e7ar: Tags\" (opcional).</p> </li> <li> <p>Na p\u00e1gina \"Adicionar tags\", adicione tags (opcional) e clique no bot\u00e3o \"Avan\u00e7ar: Revisar\".</p> </li> <li> <p>Na p\u00e1gina \"Revisar\", revise as configura\u00e7\u00f5es da conta do usu\u00e1rio e clique no bot\u00e3o \"Criar usu\u00e1rio\".</p> </li> <li> <p>Na p\u00e1gina \"Usu\u00e1rios\", selecione o usu\u00e1rio rec\u00e9m-criado e clique na guia \"Credenciais de seguran\u00e7a\".</p> </li> <li> <p>Agora na mesma guia voc\u00ea pode criar as \"chaves de acesso\":</p> </li> </ul> <p></p> <ul> <li>Anote ou baixe as chaves de acesso (Access Key ID e Secret Access Key) para uso posterior com o Terraform.</li> </ul> <p>Agora que voc\u00ea criou as credenciais de acesso program\u00e1tico na AWS, voc\u00ea pode usar essas credenciais para autenticar o Terraform e gerenciar sua infraestrutura na AWS. Certifique-se de armazenar as chaves de acesso com seguran\u00e7a e de nunca compartilhar essas informa\u00e7\u00f5es com outras pessoas.</p>"},{"location":"#configuracao-da-sua-conta-aws-no-powershell","title":"Configura\u00e7\u00e3o da sua conta AWS no powershell","text":""},{"location":"#1-opcao","title":"1 op\u00e7\u00e3o","text":"<p>Para configurar a AWS pelo AWS CLI (command Line Interface),siga o tutorial abaixo:         -  https://www.youtube.com/watch?v=saSaoZJVQnk&amp;t=34s</p> <p>Para configurar sua conta no powershell, com o AWS CLI instalado, execute o comando \"aws configure\" no prompt de comando ou terminal e siga as instru\u00e7\u00f5es para inserir suas credenciais de acesso:</p> <ul> <li>Execute o comando \"aws configure\" no prompt de comando ou terminal</li> <li>Insira suas credenciais de acesso \u00e0 AWS (chave de acesso e chave secreta) quando solicitado. Voc\u00ea pode obter essas credenciais na se\u00e7\u00e3o \"Security Credentials\" no Console de Gerenciamento da AWS.</li> </ul> <p></p> <ul> <li>Escolha a regi\u00e3o padr\u00e3o para seus recursos da AWS, se solicitado.</li> </ul> <p></p> <ul> <li>Escolha o formato padr\u00e3o para as sa\u00eddas do AWS CLI, se solicitado.</li> </ul> <p></p> <p>Certifique-se de que suas credenciais estejam configuradas corretamente e que voc\u00ea tenha as permiss\u00f5es necess\u00e1rias para acessar os recursos da AWS que est\u00e1 tentando acessar.</p>"},{"location":"#2-opcao","title":"2 op\u00e7\u00e3o","text":"<p>Para configurar a AWS no PowerShell para usar o Terraform, voc\u00ea n\u00e3o precisa necessariamente estar no diret\u00f3rio do seu projeto. No entanto, \u00e9 importante que voc\u00ea tenha o arquivo de configura\u00e7\u00e3o de credenciais da AWS (geralmente localizado em <code>~/.aws/credentials</code> no Linux ou macOS e em <code>C:\\Users\\USERNAME\\.aws\\credentials</code> no Windows) configurado corretamente com as credenciais da sua conta da AWS.</p> <p>Depois de configurar o arquivo de credenciais da AWS, voc\u00ea pode configurar as credenciais da AWS no PowerShell usando as seguintes vari\u00e1veis de ambiente:</p> <pre><code>$env:AWS_ACCESS_KEY_ID=\"SUA_ACCESS_KEY_ID\"\n$env:AWS_SECRET_ACCESS_KEY=\"SUA_SECRET_ACCESS_KEY\"\n$env:AWS_DEFAULT_REGION=\"REGI\u00c3O_PREFERENCIAL\"\n</code></pre>"},{"location":"#utilizacao-terraform","title":"Utiliza\u00e7\u00e3o terraform","text":"<p>Agora j\u00e1 estamos prontos pra utlizar o projeto com as configura\u00e7\u00f5es do terraform e da AWS, ou seja, os principais comandos do terraform (vistos ao longo desse tutorial) para a cria\u00e7\u00e3o da infraestrutura ser\u00e3o vistos na AWS. Por isso, como um fluxo de trabalho interessante \u00e9 importante fazer o trabalho de forma local e ,posteriormente, conferir todas as atualiza\u00e7\u00f5es no seu console da AWS.</p> <p>Para baixar esse projeto v\u00e1 em algum diret\u00f3rio da sua m\u00e1quina e digite : <pre><code>git clone https://github.com/gabri190/AWS-lambda.git\n</code></pre></p> <p>Para aqueles que n\u00e3o possuem alguma deped\u00eancia necess\u00e1ria para esse projeto, foi criado um arquivo requirements.txt e para rodar utilize o seguinte comando abaixo:</p> <pre><code>pip install -r requirements.txt\n</code></pre> <p>Como j\u00e1 instalei, a imagem a seguir mostrar\u00e1 as depend\u00eancias j\u00e1 instaladas</p> <p></p> <p>Agora com o projeto j\u00e1 baixado, podemos come\u00e7ar a utilizar os principais comandos do terraform para subir nossa infraestrura.Dessa maneira, v\u00e1 ao diret\u00f3rio onde seu projeto foi clonado anteriormente e digite o seguinte comando: <pre><code>terraform init\n</code></pre></p> <p>A imagem a seguir mostrar\u00e1 a saida adequada com a infraestrutura sendo inicializada:</p> <p></p> <p>Voc\u00ea pode utilizar o comando validate para validar a sintaxe do arquivo de configura\u00e7\u00e3o do Terraform. Ele verifica se o arquivo de configura\u00e7\u00e3o est\u00e1 correto em termos de sintaxe e de acordo com a documenta\u00e7\u00e3o da vers\u00e3o do Terraform que voc\u00ea est\u00e1 usando,como a seguir:</p> <pre><code>terraform validate\n</code></pre> <p>A imagem a seguir mostrar\u00e1 a saida adequada com a infraestrutura validada em sintaxe:</p> <p></p> <p>A seguir ser\u00e1 utilizado o comando plan. Esse comando \u00e9 usado para criar um plano de execu\u00e7\u00e3o que mostra o que o Terraform far\u00e1 quando voc\u00ea executar o comando apply. O plano mostra quais recursos ser\u00e3o criados, atualizados ou exclu\u00eddos e quaisquer mudan\u00e7as no estado que ocorrer\u00e3o como resultado dessas a\u00e7\u00f5es. O plano \u00e9 uma visualiza\u00e7\u00e3o \u00fatil do que o Terraform far\u00e1 e permite que voc\u00ea verifique se est\u00e1 satisfeito com as mudan\u00e7as antes de executar o comando apply. <pre><code>terraform plan\n</code></pre></p> <p>A imagem a seguir mostrar\u00e1 a seguida adequada com a infraestrutura sendo planejada:</p> <p></p> <p>Agora por fim podemos aplicar a infraestrutura e subi-l\u00e1 na AWS por meio do comando apply, mostrado a seguir (pode demorar uns minutinhos):. <pre><code>terraform apply -auto-approve\n</code></pre></p> <p>A imagem a seguir mostrar\u00e1 a seguida adequada com a infraestrutura sendo aplicada:</p> <p></p>"},{"location":"#teste-infraestrutura-aws","title":"Teste Infraestrutura AWS","text":""},{"location":"#recursos-criados","title":"Recursos Criados","text":"<p>Primeiramente, \u00e9 necess\u00e1rio saber se os recursos de fato foram criados na AWS:</p> <ul> <li>Acesse o console da AWS com o seu login e senha da AWS:</li> </ul> <p></p> <ul> <li>Verifique a cria\u00e7\u00e3o dos servi\u00e7os procurando nesse campo: </li> </ul> <p></p> <p>Procure em sequ\u00eancia com os nomes \"SQS\" , \"Lambda\", \"RDS\" e DynamoDB\"</p>"},{"location":"#criacao-sqs","title":"Cria\u00e7\u00e3o SQS","text":"<p>Procure por project-terraform-event-notification-queue e clique para ir \u00e0 pagina a seguir:</p> <p></p>"},{"location":"#criacao-lambda-function","title":"Cria\u00e7\u00e3o lambda Function","text":"<p>Procure por project-terraform-lambda-function e clique para ir \u00e0 pagina a seguir:</p> <p></p>"},{"location":"#criacao-rds","title":"Cria\u00e7\u00e3o RDS","text":"<p>Ao chegar a p\u00e1gina ap\u00f3s procurar por \"RDS\" no campo de pesquisa na parte esquerda procure por bancos de dados e clique para ir \u00e0 pagina, posteriormente voc\u00ea ser\u00e1 redirecionado a p\u00e1gina dos bancos e clique no \u00fanico banco e ir\u00e1 para a pr\u00f3xima p\u00e1gina:</p> <p></p>"},{"location":"#criacao-dynamodb","title":"Cria\u00e7\u00e3o DynamoDB","text":"<p>Ao chegar a p\u00e1gina ap\u00f3s procurar por \"DyanamoDB\" no campo de pesquisa na parte esquerda procure por tabelas e clique para ir \u00e0 pagina, posteriormente voc\u00ea ser\u00e1 redirecionado a p\u00e1gina de tabelas e clique na \u00fanica tabela e ir\u00e1 para a pr\u00f3xima p\u00e1gina:</p> <p></p>"},{"location":"#teste-dos-recursos","title":"Teste dos Recursos","text":"<p>Agora podemos testar os recursos criados na AWS, como visto anteriormente:</p> <ul> <li>Com tudo criado volte para a fun\u00e7\u00e3o lambda criada, e na parte principal v\u00e1 em testar:</li> </ul> <p></p> <ul> <li>Substitua o JSON do evento pelo c\u00f3digo a seguir:</li> </ul> <p>test.json <pre><code>{\n\"Records\": [\n{\n\"messageId\": \"059f36b4-87a3-44ab-83d2-661975830a7d\",\n\"receiptHandle\": \"AQEBwJnKyrHigUMZj6rYigCgxlaS3SLy0a...\",\n\"body\": \"{\\n     \\\"CustID\\\": 1021,\\n     \\\"Name\\\": \\\"Martha Rivera\\\"\\n}\",\n\"attributes\": {\n\"ApproximateReceiveCount\": \"1\",\n\"SentTimestamp\": \"1545082649183\",\n\"SenderId\": \"AIDAIENQZJOLO23YVJ4VO\",\n\"ApproximateFirstReceiveTimestamp\": \"1545082649185\"\n},\n\"messageAttributes\": {},\n\"md5OfBody\": \"e4e68fb7bd0e697a0ae8f1bb342846b3\",\n\"eventSource\": \"aws:sqs\",\n\"eventSourceARN\": \"arn:aws:sqs:us-east-1:108791993403:project-terraform-s3-event-notification-queue\",\n\"awsRegion\": \"us-east-1\"\n}\n]\n} </code></pre></p> <ul> <li> <p>Salve o evento e agora estaremos prontos pra testar!</p> </li> <li> <p>Volte para a parte de c\u00f3digo e ap\u00f3s clicar em teste, a imagem a seguir dever\u00e1 aparecer avisando que 1 item foi adicionado ao RDS:</p> </li> </ul> <p></p> <ul> <li>Agora volte ao recurso criado do SQS (queue) ,clique na queue criada e posteriormente, clique em enviar e receber mensagens e j\u00e1 nessa p\u00e1gina envie a mensagem a seguir:</li> </ul> <p></p> <ul> <li>A mensagem correspondente em um json:</li> </ul> <p>sqs_test.json <pre><code>{\n\"CustID\": 1054,\n\"Name\": \"Richard Roe\"\n}\n</code></pre></p> <ul> <li>Podemos ver essas cria\u00e7\u00f5es por meio do cloudwatch, pesquise por cloudwatch e ao chegar \u00e0 p\u00e1gina clique em Grupos de Logs na parte de Logs:</li> </ul> <p></p> <p>Clique em   /aws/lambda/project-terraform-lambda-function :</p> <p></p> <ul> <li>Clique no \u00faltimo log criado (o primeiro de cima pra baixo):</li> </ul> <p></p> <ul> <li>Ap\u00f3s isso teremos a imagem :  </li> </ul> <p></p> <ul> <li>Na imagem anterior percebemos, entre todas as mensagens, a cria\u00e7\u00e3o de 2 items de maneira que um deles foi criado no JSON de evento simulado e outro por meio do envio da mensagem da SQS para a fun\u00e7\u00e3o lambda:</li> </ul> <p></p> <ul> <li>Agora modifique o c\u00f3digo python na se\u00e7\u00e3o de c\u00f3digos da fun\u00e7\u00e3o lambda para o \u00faltimo teste agora em rela\u00e7\u00e3o ao DynamoDB!  </li> </ul> <pre><code>def lambda_handler(event, context):\n    print('Incoming event: ', event)\n    print('Incoming state: ', event['state'])\n\n#Check if this is the end of the window to either aggregate or process.\n    if event['isFinalInvokeForWindow']:\n        # logic to handle final state of the window\n        print('Destination invoke')\n    else:\n        print('Aggregate invoke')\n\n#Check for early terminations\n    if event['isWindowTerminatedEarly']:\n        print('Window terminated early')\n\n    #Aggregation logic\n    state = event['state']\n    for record in event['Records']:\n        state[str(record['dynamodb']['Keys']['Id']['N'])] = state.get(str(record['dynamodb']['Keys']['Id']['N']), 0) + 1\n\n\n    print('Returning state: ', state)\n    return {'state': state}\n</code></pre> <ul> <li>Modifique tamb\u00e9m o JSON de evento:</li> </ul> <pre><code> {\n\"Records\": [\n{\n\"eventID\": \"1\",\n\"eventName\": \"INSERT\",\n\"eventVersion\": \"1.0\",\n\"eventSource\": \"aws:dynamodb\",\n\"awsRegion\": \"us-east-1\",\n\"dynamodb\": {\n\"Keys\": {\n\"Id\": {\n\"N\": \"101\"\n}\n},\n\"NewImage\": {\n\"Message\": {\n\"S\": \"New item!\"\n},\n\"Id\": {\n\"N\": \"101\"\n}\n},\n\"SequenceNumber\": \"111\",\n\"SizeBytes\": 26,\n\"StreamViewType\": \"NEW_AND_OLD_IMAGES\"\n},\n\"eventSourceARN\": \"stream-ARN\"\n},\n{\n\"eventID\": \"2\",\n\"eventName\": \"MODIFY\",\n\"eventVersion\": \"1.0\",\n\"eventSource\": \"aws:dynamodb\",\n\"awsRegion\": \"us-east-1\",\n\"dynamodb\": {\n\"Keys\": {\n\"Id\": {\n\"N\": \"101\"\n}\n},\n\"NewImage\": {\n\"Message\": {\n\"S\": \"This item has changed\"\n},\n\"Id\": {\n\"N\": \"101\"\n}\n},\n\"OldImage\": {\n\"Message\": {\n\"S\": \"New item!\"\n},\n\"Id\": {\n\"N\": \"101\"\n}\n},\n\"SequenceNumber\": \"222\",\n\"SizeBytes\": 59,\n\"StreamViewType\": \"NEW_AND_OLD_IMAGES\"\n},\n\"eventSourceARN\": \"stream-ARN\"\n},\n{\n\"eventID\": \"3\",\n\"eventName\": \"REMOVE\",\n\"eventVersion\": \"1.0\",\n\"eventSource\": \"aws:dynamodb\",\n\"awsRegion\": \"us-east-1\",\n\"dynamodb\": {\n\"Keys\": {\n\"Id\": {\n\"N\": \"101\"\n}\n},\n\"OldImage\": {\n\"Message\": {\n\"S\": \"This item has changed\"\n},\n\"Id\": {\n\"N\": \"101\"\n}\n},\n\"SequenceNumber\": \"333\",\n\"SizeBytes\": 38,\n\"StreamViewType\": \"NEW_AND_OLD_IMAGES\"\n},\n\"eventSourceARN\": \"stream-ARN\"\n}\n],\n\"window\": {\n\"start\": \"2020-07-30T17:00:00Z\",\n\"end\": \"2020-07-30T17:05:00Z\"\n},\n\"state\": {\n\"1\": \"state1\"\n},\n\"shardId\": \"shard123456789\",\n\"eventSourceARN\": \"stream-ARN\",\n\"isFinalInvokeForWindow\": false,\n\"isWindowTerminatedEarly\": false\n} </code></pre> <ul> <li>Voc\u00ea ver\u00e1 a seguinte sa\u00edda:</li> </ul> <p></p> <ul> <li>Pelo cloudwatch podemos ver nos streams de log (clique sempre no \u00faltimo de cima pra baixo) o item criado:</li> </ul> <p></p>"},{"location":"#termino-e-destruicao-da-infraestrutura","title":"T\u00e9rmino e destrui\u00e7\u00e3o da Infraestrutura","text":"<p>Ao realizar todos os testes na AWS e conferir todos os recursos precisamos destruir a infraestutura e a seguir alguns motivos pelos quais precisamos realizar essa \u00faltima a\u00e7\u00e3o:</p> <ul> <li> <p>Evitar custos desnecess\u00e1rios: Quando n\u00e3o precisamos mais da infraestrutura que criamos, devemos destru\u00ed-la para evitar custos desnecess\u00e1rios de infraestrutura em execu\u00e7\u00e3o na nuvem.</p> </li> <li> <p>Manter o ambiente limpo: Destruir a infraestrutura garante que o ambiente de nuvem seja mantido limpo e organizado, facilitando a manuten\u00e7\u00e3o e a atualiza\u00e7\u00e3o futura do ambiente.</p> </li> <li> <p>Identificar problemas de configura\u00e7\u00e3o: Destruir a infraestrutura \u00e9 uma boa maneira de testar se as configura\u00e7\u00f5es do Terraform est\u00e3o funcionando corretamente. Se a infraestrutura for criada e destru\u00edda com sucesso, isso significa que as configura\u00e7\u00f5es do Terraform foram escritas corretamente.</p> </li> <li> <p>Flexibilidade: A destrui\u00e7\u00e3o da infraestrutura com o terraform destroy d\u00e1 a flexibilidade de recriar a infraestrutura facilmente, se necess\u00e1rio, com as mesmas configura\u00e7\u00f5es.</p> </li> </ul> <p>Dito isso, o \u00faltimo comando ser\u00e1 aplicado para destruir a infraestrutura.Nesse contexto, no seu terminal destrua a aplica\u00e7\u00e3o com o comando a seguir:</p> <pre><code>terraform destroy\n</code></pre> <p>Ap\u00f3s destruir a infraestrutura, voc\u00ea ver\u00e1 a sa\u00edda a seguir:</p> <p> </p> <p>Observa\u00e7\u00f5es Finais :     -  Os comandos terraform apply e terraform destroy podem demorar mais do que o normal pelos servi\u00e7os que est\u00e3o subindo na AWS, por isso, principalmente, no destroy pode ser necess\u00e1rio rodar o comando mais de uma vez!</p>"},{"location":"#conclusao","title":"Conclus\u00e3o","text":"<p>Assim, finalizamos nosso projeto que tinha como intuito o cadastro de usu\u00e1rios em bancos de dados (amazon RDS) e tabelas (DynamoDb), no entanto, note que o ponto central desse projeto diz respeito a fun\u00e7\u00e3o lambda que faz toda a integra\u00e7\u00e3o entre o sistema de filas (SQS) que realiza o envio da mensagem e os sistemas de armazenamento de dados (RDS e DynamoDB). Por isso, apesar de ser apenas um projeto menor, v\u00ea-se a import\u00e2ncia da lambda function e de todas as integra\u00e7\u00f5es feitas para o sistema de armazenamento de valores (dados de usu\u00e1rios) que pode , por exemplo, servir de backend para um site ou outros usos a depender da itera\u00e7\u00e3o para a melhora do projeto. </p>"},{"location":"#referencias","title":"Refer\u00eancias","text":"<p>https://www.youtube.com/watch?v=3E1IcVIaI0A&amp;t=756s</p> <p>https://www.youtube.com/watch?v=etru_8t7Dyk&amp;t=2226s</p> <p>https://docs.aws.amazon.com/pt_br/lambda/latest/dg/services-rds-tutorial.html</p> <p>https://docs.aws.amazon.com/pt_br/lambda/latest/dg/with-ddb.html </p> <p>https://registry.terraform.io/providers/hashicorp/aws/latest/docs</p>"}]}